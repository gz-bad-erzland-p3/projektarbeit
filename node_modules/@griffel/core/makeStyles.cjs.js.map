{"version":3,"file":"makeStyles.cjs.js","sources":["../../../packages/core/src/makeStyles.ts"],"sourcesContent":["import { debugData, isDevToolsEnabled, getSourceURLfromError } from './devtools';\nimport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport { CSSClassesMapBySlot, CSSRulesByBucket, MakeStylesOptions, StylesBySlots } from './types';\n\nexport function makeStyles<Slots extends string | number>(stylesBySlots: StylesBySlots<Slots>) {\n  const insertionCache: Record<string, boolean> = {};\n\n  let classesMapBySlot: CSSClassesMapBySlot<Slots> | null = null;\n  let cssRules: CSSRulesByBucket | null = null;\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  let sourceURL: string | undefined;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceURL = getSourceURLfromError();\n  }\n\n  function computeClasses(options: MakeStylesOptions): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    if (classesMapBySlot === null) {\n      [classesMapBySlot, cssRules] = resolveStyleRulesForSlots(stylesBySlots);\n    }\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules!);\n      insertionCache[rendererId] = true;\n    }\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!, sourceURL);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"names":["makeStyles","stylesBySlots","insertionCache","classesMapBySlot","cssRules","ltrClassNamesForSlots","rtlClassNamesForSlots","sourceURL","process","env","NODE_ENV","isDevToolsEnabled","getSourceURLfromError","computeClasses","options","dir","renderer","resolveStyleRulesForSlots","isLTR","rendererId","id","reduceToClassNameForSlots","undefined","insertCSSRules","classNamesForSlots","debugData","addSequenceDetails"],"mappings":";;;;;;;;;;;SAKgBA,WAA0CC;EACxD,MAAMC,cAAc,GAA4B,EAAhD;EAEA,IAAIC,gBAAgB,GAAsC,IAA1D;EACA,IAAIC,QAAQ,GAA4B,IAAxC;EAEA,IAAIC,qBAAqB,GAAiC,IAA1D;EACA,IAAIC,qBAAqB,GAAiC,IAA1D;EAEA,IAAIC,SAAJ;;EACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,mCAA7C,EAAgE;IAC9DJ,SAAS,GAAGK,2CAAqB,EAAjC;;;EAGF,SAASC,cAAT,CAAwBC,OAAxB;IACE,MAAM;MAAEC,GAAF;MAAOC;QAAaF,OAA1B;;IAEA,IAAIX,gBAAgB,KAAK,IAAzB,EAA+B;MAC7B,CAACA,gBAAD,EAAmBC,QAAnB,IAA+Ba,mDAAyB,CAAChB,aAAD,CAAxD;;;IAGF,MAAMiB,KAAK,GAAGH,GAAG,KAAK,KAAtB;;IAEA,MAAMI,UAAU,GAAGD,KAAK,GAAGF,QAAQ,CAACI,EAAZ,GAAiBJ,QAAQ,CAACI,EAAT,GAAc,GAAvD;;IAEA,IAAIF,KAAJ,EAAW;MACT,IAAIb,qBAAqB,KAAK,IAA9B,EAAoC;QAClCA,qBAAqB,GAAGgB,mDAAyB,CAAClB,gBAAD,EAAmBY,GAAnB,CAAjD;;KAFJ,MAIO;MACL,IAAIT,qBAAqB,KAAK,IAA9B,EAAoC;QAClCA,qBAAqB,GAAGe,mDAAyB,CAAClB,gBAAD,EAAmBY,GAAnB,CAAjD;;;;IAIJ,IAAIb,cAAc,CAACiB,UAAD,CAAd,KAA+BG,SAAnC,EAA8C;MAC5CN,QAAQ,CAACO,cAAT,CAAwBnB,QAAxB;MACAF,cAAc,CAACiB,UAAD,CAAd,GAA6B,IAA7B;;;IAEF,MAAMK,kBAAkB,GAAGN,KAAK,GAC3Bb,qBAD2B,GAE3BC,qBAFL;;IAIA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,mCAA7C,EAAgE;MAC9Dc,eAAS,CAACC,kBAAV,CAA6BF,kBAA7B,EAAkDjB,SAAlD;;;IAGF,OAAOiB,kBAAP;;;EAGF,OAAOX,cAAP;AACD;;;;"}