{"version":3,"file":"compileCSS.esm.js","sources":["../../../../packages/core/src/runtime/compileCSS.ts"],"sourcesContent":["import { compile, middleware, prefixer, rulesheet, serialize, stringify } from 'stylis';\n\nimport { globalPlugin } from './stylis/globalPlugin';\nimport { hyphenateProperty } from './utils/hyphenateProperty';\nimport { normalizeNestedProperty } from './utils/normalizeNestedProperty';\n\nexport interface CompileCSSOptions {\n  className: string;\n\n  selectors: string[];\n  media: string;\n  layer: string;\n  support: string;\n\n  property: string;\n  value: number | string | Array<number | string>;\n\n  rtlClassName?: string;\n  rtlProperty?: string;\n  rtlValue?: number | string | Array<number | string>;\n}\n\nconst PSEUDO_SELECTOR_REGEX = /,( *[^ &])/g;\n\n/**\n * Normalizes pseudo selectors to always contain &, requires to work properly with comma-separated selectors.\n *\n * @example\n *   \":hover\" => \"&:hover\"\n *   \" :hover\" => \"& :hover\"\n *   \":hover,:focus\" => \"&:hover,&:focus\"\n *   \" :hover, :focus\" => \"& :hover,& :focus\"\n */\nexport function normalizePseudoSelector(pseudoSelector: string): string {\n  return (\n    '&' +\n    normalizeNestedProperty(\n      // Regex there replaces a comma, spaces and an ampersand if it's present with comma and an ampersand.\n      // This allows to normalize input, see examples in JSDoc.\n      pseudoSelector.replace(PSEUDO_SELECTOR_REGEX, ',&$1'),\n    )\n  );\n}\n\nexport function compileCSSRules(cssRules: string): string[] {\n  const rules: string[] = [];\n\n  serialize(\n    compile(cssRules),\n    middleware([\n      globalPlugin,\n      prefixer,\n      stringify,\n\n      // ðŸ’¡ we are using `.insertRule()` API for DOM operations, which does not support\n      // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts\n      // individual rules to be used with this API\n      rulesheet(rule => rules.push(rule)),\n    ]),\n  );\n\n  return rules;\n}\n\nfunction createCSSRule(classNameSelector: string, cssDeclaration: string, pseudos: string[]): string {\n  let cssRule = cssDeclaration;\n\n  if (pseudos.length > 0) {\n    cssRule = pseudos.reduceRight((acc, selector) => {\n      return `${normalizePseudoSelector(selector)} { ${acc} }`;\n    }, cssDeclaration);\n  }\n\n  return `${classNameSelector}{${cssRule}}`;\n}\n\nexport function compileCSS(options: CompileCSSOptions): [string /* ltr definition */, string? /* rtl definition */] {\n  const { className, media, layer, selectors, support, property, rtlClassName, rtlProperty, rtlValue, value } = options;\n\n  const classNameSelector = `.${className}`;\n  const cssDeclaration = Array.isArray(value)\n    ? `${value.map(v => `${hyphenateProperty(property)}: ${v}`).join(';')};`\n    : `${hyphenateProperty(property)}: ${value};`;\n\n  let cssRule = createCSSRule(classNameSelector, cssDeclaration, selectors);\n\n  if (rtlProperty && rtlClassName) {\n    const rtlClassNameSelector = `.${rtlClassName}`;\n    const rtlCSSDeclaration = Array.isArray(rtlValue)\n      ? `${rtlValue.map(v => `${hyphenateProperty(rtlProperty)}: ${v}`).join(';')};`\n      : `${hyphenateProperty(rtlProperty)}: ${rtlValue};`;\n\n    cssRule += createCSSRule(rtlClassNameSelector, rtlCSSDeclaration, selectors);\n  }\n\n  if (media) {\n    cssRule = `@media ${media} { ${cssRule} }`;\n  }\n\n  if (layer) {\n    cssRule = `@layer ${layer} { ${cssRule} }`;\n  }\n\n  if (support) {\n    cssRule = `@supports ${support} { ${cssRule} }`;\n  }\n\n  return compileCSSRules(cssRule) as [string, string?];\n}\n"],"names":["PSEUDO_SELECTOR_REGEX","normalizePseudoSelector","pseudoSelector","normalizeNestedProperty","replace","compileCSSRules","cssRules","rules","serialize","compile","middleware","globalPlugin","prefixer","stringify","rulesheet","rule","push","createCSSRule","classNameSelector","cssDeclaration","pseudos","cssRule","length","reduceRight","acc","selector","compileCSS","options","className","media","layer","selectors","support","property","rtlClassName","rtlProperty","rtlValue","value","Array","isArray","map","v","hyphenateProperty","join","rtlClassNameSelector","rtlCSSDeclaration"],"mappings":";;;;;AAsBA,MAAMA,qBAAqB,GAAG,aAA9B;AAEA;;;;;;;;;;SASgBC,wBAAwBC;EACtC,OACE,MACAC,uBAAuB;;EAGrBD,cAAc,CAACE,OAAf,CAAuBJ,qBAAvB,EAA8C,MAA9C,CAHqB,CAFzB;AAQD;SAEeK,gBAAgBC;EAC9B,MAAMC,KAAK,GAAa,EAAxB;EAEAC,SAAS,CACPC,OAAO,CAACH,QAAD,CADA,EAEPI,UAAU,CAAC,CACTC,YADS,EAETC,QAFS,EAGTC,SAHS;;;EAQTC,SAAS,CAACC,IAAI,IAAIR,KAAK,CAACS,IAAN,CAAWD,IAAX,CAAT,CARA,CAAD,CAFH,CAAT;EAcA,OAAOR,KAAP;AACD;;AAED,SAASU,aAAT,CAAuBC,iBAAvB,EAAkDC,cAAlD,EAA0EC,OAA1E;EACE,IAAIC,OAAO,GAAGF,cAAd;;EAEA,IAAIC,OAAO,CAACE,MAAR,GAAiB,CAArB,EAAwB;IACtBD,OAAO,GAAGD,OAAO,CAACG,WAAR,CAAoB,CAACC,GAAD,EAAMC,QAAN;MAC5B,UAAUxB,uBAAuB,CAACwB,QAAD,OAAgBD,OAAjD;KADQ,EAEPL,cAFO,CAAV;;;EAKF,UAAUD,qBAAqBG,UAA/B;AACD;;SAEeK,WAAWC;EACzB,MAAM;IAAEC,SAAF;IAAaC,KAAb;IAAoBC,KAApB;IAA2BC,SAA3B;IAAsCC,OAAtC;IAA+CC,QAA/C;IAAyDC,YAAzD;IAAuEC,WAAvE;IAAoFC,QAApF;IAA8FC;MAAUV,OAA9G;EAEA,MAAMT,iBAAiB,OAAOU,WAA9B;EACA,MAAMT,cAAc,GAAGmB,KAAK,CAACC,OAAN,CAAcF,KAAd,OAChBA,KAAK,CAACG,GAAN,CAAUC,CAAC,OAAOC,iBAAiB,CAACT,QAAD,MAAeQ,GAAlD,EAAuDE,IAAvD,CAA4D,GAA5D,IADgB,MAEhBD,iBAAiB,CAACT,QAAD,MAAeI,QAFvC;EAIA,IAAIhB,OAAO,GAAGJ,aAAa,CAACC,iBAAD,EAAoBC,cAApB,EAAoCY,SAApC,CAA3B;;EAEA,IAAII,WAAW,IAAID,YAAnB,EAAiC;IAC/B,MAAMU,oBAAoB,OAAOV,cAAjC;IACA,MAAMW,iBAAiB,GAAGP,KAAK,CAACC,OAAN,CAAcH,QAAd,OACnBA,QAAQ,CAACI,GAAT,CAAaC,CAAC,OAAOC,iBAAiB,CAACP,WAAD,MAAkBM,GAAxD,EAA6DE,IAA7D,CAAkE,GAAlE,IADmB,MAEnBD,iBAAiB,CAACP,WAAD,MAAkBC,WAF1C;IAIAf,OAAO,IAAIJ,aAAa,CAAC2B,oBAAD,EAAuBC,iBAAvB,EAA0Cd,SAA1C,CAAxB;;;EAGF,IAAIF,KAAJ,EAAW;IACTR,OAAO,aAAaQ,WAAWR,WAA/B;;;EAGF,IAAIS,KAAJ,EAAW;IACTT,OAAO,aAAaS,WAAWT,WAA/B;;;EAGF,IAAIW,OAAJ,EAAa;IACXX,OAAO,gBAAgBW,aAAaX,WAApC;;;EAGF,OAAOhB,eAAe,CAACgB,OAAD,CAAtB;AACD;;;;"}