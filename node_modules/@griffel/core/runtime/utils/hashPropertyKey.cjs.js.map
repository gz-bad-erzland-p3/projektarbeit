{"version":3,"file":"hashPropertyKey.cjs.js","sources":["../../../../../packages/core/src/runtime/utils/hashPropertyKey.ts"],"sourcesContent":["import hash from '@emotion/hash';\nimport { PropertyHash } from '../../types';\n\nexport function hashPropertyKey(selectors: string[], media: string, support: string, property: string): PropertyHash {\n  // uniq key based on property & selector, used for merging later\n  const computedKey = selectors.join('') + media + support + property;\n\n  // \"key\" can be really long as it includes selectors, we use hashes to reduce sizes of keys\n  // \".foo :hover\" => \"abcd\"\n  const hashedKey = hash(computedKey);\n\n  // As these hashes are used as object keys in build output we should avoid having numbers as a first character to\n  // avoid having quotes:\n  // {\n  //   \"1abc\": {}, // we don't want this\n  //   Aabc: {}, // no quotes\n  // }\n  const firstCharCode = hashedKey.charCodeAt(0);\n  const startsWithNumber = firstCharCode >= 48 && firstCharCode <= 57;\n\n  if (startsWithNumber) {\n    return String.fromCharCode(firstCharCode + 17) + hashedKey.substr(1);\n  }\n\n  return hashedKey;\n}\n"],"names":["hashPropertyKey","selectors","media","support","property","computedKey","join","hashedKey","hash","firstCharCode","charCodeAt","startsWithNumber","String","fromCharCode","substr"],"mappings":";;;;;;;;;;SAGgBA,gBAAgBC,WAAqBC,OAAeC,SAAiBC;;EAEnF,MAAMC,WAAW,GAAGJ,SAAS,CAACK,IAAV,CAAe,EAAf,IAAqBJ,KAArB,GAA6BC,OAA7B,GAAuCC,QAA3D;;;EAIA,MAAMG,SAAS,GAAGC,8BAAI,CAACH,WAAD,CAAtB;;;;;;;EAQA,MAAMI,aAAa,GAAGF,SAAS,CAACG,UAAV,CAAqB,CAArB,CAAtB;EACA,MAAMC,gBAAgB,GAAGF,aAAa,IAAI,EAAjB,IAAuBA,aAAa,IAAI,EAAjE;;EAEA,IAAIE,gBAAJ,EAAsB;IACpB,OAAOC,MAAM,CAACC,YAAP,CAAoBJ,aAAa,GAAG,EAApC,IAA0CF,SAAS,CAACO,MAAV,CAAiB,CAAjB,CAAjD;;;EAGF,OAAOP,SAAP;AACD;;;;"}