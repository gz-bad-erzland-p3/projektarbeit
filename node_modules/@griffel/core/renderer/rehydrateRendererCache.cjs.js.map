{"version":3,"file":"rehydrateRendererCache.cjs.js","sources":["../../../../packages/core/src/renderer/rehydrateRendererCache.ts"],"sourcesContent":["import { GriffelRenderer, StyleBucketName } from '../types';\nimport { createIsomorphicStyleSheetFromElement } from './createIsomorphicStyleSheet';\nimport { isDevToolsEnabled, debugData } from '../devtools';\n\n// Regexps to extract names of classes and animations\n// https://github.com/styletron/styletron/blob/e0fcae826744eb00ce679ac613a1b10d44256660/packages/styletron-engine-atomic/src/client/client.js#L8\nconst KEYFRAMES_HYDRATOR = /@(-webkit-)?keyframes ([^{]+){((?:(?:from|to|(?:\\d+\\.?\\d*%))\\{(?:[^}])*})*)}/g;\nconst AT_RULES_HYDRATOR = /@(media|supports|layer)[^{]+\\{([\\s\\S]+?})\\s*}/g;\nconst STYLES_HYDRATOR = /\\.([^{:]+)(:[^{]+)?{(?:[^}]*;)?([^}]*?)}/g;\n\nconst regexps: Partial<Record<StyleBucketName, RegExp>> = {\n  k: KEYFRAMES_HYDRATOR,\n  t: AT_RULES_HYDRATOR,\n  m: AT_RULES_HYDRATOR,\n};\n\n/**\n * Should be called in a case of Server-Side rendering. Rehydrates cache from for a renderer to avoid double insertion\n * of classes to DOM.\n *\n * @public\n */\nexport function rehydrateRendererCache(\n  renderer: GriffelRenderer,\n  target: Document | undefined = typeof document === 'undefined' ? undefined : document,\n) {\n  if (target) {\n    const styleElements = target.querySelectorAll<HTMLStyleElement>('[data-make-styles-bucket]');\n\n    styleElements.forEach(styleElement => {\n      const bucketName = styleElement.dataset['makeStylesBucket'] as StyleBucketName;\n      const regex = regexps[bucketName] || STYLES_HYDRATOR;\n\n      const stylesheetKey = bucketName === 'm' ? bucketName + styleElement.media : bucketName;\n\n      // ðŸ‘‡ If some elements are not created yet, we will register them in renderer\n      if (!renderer.stylesheets[stylesheetKey]) {\n        renderer.stylesheets[stylesheetKey] = createIsomorphicStyleSheetFromElement(styleElement);\n      }\n\n      let match;\n      while ((match = regex.exec(styleElement.textContent!))) {\n        // \"cacheKey\" is either a class name or an animation name\n        const [cssRule] = match;\n\n        renderer.insertionCache[cssRule] = bucketName;\n\n        if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n          debugData.addCSSRule(cssRule);\n        }\n      }\n    });\n  }\n}\n"],"names":["KEYFRAMES_HYDRATOR","AT_RULES_HYDRATOR","STYLES_HYDRATOR","regexps","k","t","m","rehydrateRendererCache","renderer","target","document","undefined","styleElements","querySelectorAll","forEach","styleElement","bucketName","dataset","regex","stylesheetKey","media","stylesheets","createIsomorphicStyleSheetFromElement","match","exec","textContent","cssRule","insertionCache","process","env","NODE_ENV","isDevToolsEnabled","debugData","addCSSRule"],"mappings":";;;;;;;;;AAKA;;AACA,MAAMA,kBAAkB,GAAG,+EAA3B;AACA,MAAMC,iBAAiB,GAAG,gDAA1B;AACA,MAAMC,eAAe,GAAG,2CAAxB;AAEA,MAAMC,OAAO,GAA6C;EACxDC,CAAC,EAAEJ,kBADqD;EAExDK,CAAC,EAAEJ,iBAFqD;EAGxDK,CAAC,EAAEL;AAHqD,CAA1D;AAMA;;;;;;;SAMgBM,uBACdC,UACAC,SAA+B,OAAOC,QAAP,KAAoB,WAApB,GAAkCC,SAAlC,GAA8CD;EAE7E,IAAID,MAAJ,EAAY;IACV,MAAMG,aAAa,GAAGH,MAAM,CAACI,gBAAP,CAA0C,2BAA1C,CAAtB;IAEAD,aAAa,CAACE,OAAd,CAAsBC,YAAY;MAChC,MAAMC,UAAU,GAAGD,YAAY,CAACE,OAAb,CAAqB,kBAArB,CAAnB;MACA,MAAMC,KAAK,GAAGf,OAAO,CAACa,UAAD,CAAP,IAAuBd,eAArC;MAEA,MAAMiB,aAAa,GAAGH,UAAU,KAAK,GAAf,GAAqBA,UAAU,GAAGD,YAAY,CAACK,KAA/C,GAAuDJ,UAA7E;;MAGA,IAAI,CAACR,QAAQ,CAACa,WAAT,CAAqBF,aAArB,CAAL,EAA0C;QACxCX,QAAQ,CAACa,WAAT,CAAqBF,aAArB,IAAsCG,gEAAqC,CAACP,YAAD,CAA3E;;;MAGF,IAAIQ,KAAJ;;MACA,OAAQA,KAAK,GAAGL,KAAK,CAACM,IAAN,CAAWT,YAAY,CAACU,WAAxB,CAAhB,EAAwD;;QAEtD,MAAM,CAACC,OAAD,IAAYH,KAAlB;QAEAf,QAAQ,CAACmB,cAAT,CAAwBD,OAAxB,IAAmCV,UAAnC;;QAEA,IAAIY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,mCAA7C,EAAgE;UAC9DC,eAAS,CAACC,UAAV,CAAqBP,OAArB;;;KAnBN;;AAwBH;;;;"}