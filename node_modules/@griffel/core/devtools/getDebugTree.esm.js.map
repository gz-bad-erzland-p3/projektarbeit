{"version":3,"file":"getDebugTree.esm.js","sources":["../../../../packages/core/src/devtools/getDebugTree.ts"],"sourcesContent":["import { DEFINITION_LOOKUP_TABLE } from '../constants';\nimport { LookupItem, SequenceHash } from '../types';\nimport { debugData } from './store';\nimport { DebugSequence } from './types';\nimport { getDebugClassNames } from './utils';\n\nexport function getDebugTree(debugSequenceHash: SequenceHash, parentNode?: DebugSequence) {\n  const lookupItem: LookupItem | undefined = DEFINITION_LOOKUP_TABLE[debugSequenceHash];\n  if (lookupItem === undefined) {\n    return undefined;\n  }\n\n  const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : undefined;\n  const debugClassNames = getDebugClassNames(\n    lookupItem,\n    parentLookupItem,\n    parentNode?.debugClassNames,\n    parentNode?.children,\n  );\n\n  const node: DebugSequence = {\n    sequenceHash: debugSequenceHash,\n    direction: lookupItem[1],\n    children: [],\n    debugClassNames,\n  };\n\n  const childrenSequences = debugData.getChildrenSequences(node.sequenceHash);\n  childrenSequences\n    .reverse() // first process the overriding children that are merged last\n    .forEach((sequence: SequenceHash) => {\n      const child = getDebugTree(sequence, node);\n      if (child) {\n        node.children.push(child);\n      }\n    });\n\n  // if it's leaf (makeStyle node), get css rules\n  if (!node.children.length) {\n    node.rules = {};\n    node.debugClassNames.forEach(({ className }) => {\n      const mapData = debugData.getSequenceDetails(debugSequenceHash);\n      if (mapData) {\n        node.slot = mapData.slotName;\n        node.sourceURL = mapData.sourceURL;\n      }\n\n      const cssRule = debugData.getCSSRules().find(cssRule => {\n        return cssRule.includes(className);\n      });\n\n      node.rules![className] = cssRule!;\n    });\n  }\n\n  return node;\n}\n"],"names":["getDebugTree","debugSequenceHash","parentNode","lookupItem","DEFINITION_LOOKUP_TABLE","undefined","parentLookupItem","sequenceHash","debugClassNames","getDebugClassNames","children","node","direction","childrenSequences","debugData","getChildrenSequences","reverse","forEach","sequence","child","push","length","rules","className","mapData","getSequenceDetails","slot","slotName","sourceURL","cssRule","getCSSRules","find","includes"],"mappings":";;;;SAMgBA,aAAaC,mBAAiCC;EAC5D,MAAMC,UAAU,GAA2BC,uBAAuB,CAACH,iBAAD,CAAlE;;EACA,IAAIE,UAAU,KAAKE,SAAnB,EAA8B;IAC5B,OAAOA,SAAP;;;EAGF,MAAMC,gBAAgB,GAAGJ,UAAU,GAAGE,uBAAuB,CAACF,UAAU,CAACK,YAAZ,CAA1B,GAAsDF,SAAzF;EACA,MAAMG,eAAe,GAAGC,kBAAkB,CACxCN,UADwC,EAExCG,gBAFwC,EAGxCJ,UAAU,SAAV,IAAAA,UAAU,WAAV,SAAA,GAAAA,UAAU,CAAEM,eAH4B,EAIxCN,UAAU,SAAV,IAAAA,UAAU,WAAV,SAAA,GAAAA,UAAU,CAAEQ,QAJ4B,CAA1C;EAOA,MAAMC,IAAI,GAAkB;IAC1BJ,YAAY,EAAEN,iBADY;IAE1BW,SAAS,EAAET,UAAU,CAAC,CAAD,CAFK;IAG1BO,QAAQ,EAAE,EAHgB;IAI1BF;GAJF;EAOA,MAAMK,iBAAiB,GAAGC,SAAS,CAACC,oBAAV,CAA+BJ,IAAI,CAACJ,YAApC,CAA1B;EACAM,iBAAiB,CACdG,OADH;GAEGC,OAFH,CAEYC,QAAD;IACP,MAAMC,KAAK,GAAGnB,YAAY,CAACkB,QAAD,EAAWP,IAAX,CAA1B;;IACA,IAAIQ,KAAJ,EAAW;MACTR,IAAI,CAACD,QAAL,CAAcU,IAAd,CAAmBD,KAAnB;;GALN;;EAUA,IAAI,CAACR,IAAI,CAACD,QAAL,CAAcW,MAAnB,EAA2B;IACzBV,IAAI,CAACW,KAAL,GAAa,EAAb;IACAX,IAAI,CAACH,eAAL,CAAqBS,OAArB,CAA6B,CAAC;MAAEM;KAAH;MAC3B,MAAMC,OAAO,GAAGV,SAAS,CAACW,kBAAV,CAA6BxB,iBAA7B,CAAhB;;MACA,IAAIuB,OAAJ,EAAa;QACXb,IAAI,CAACe,IAAL,GAAYF,OAAO,CAACG,QAApB;QACAhB,IAAI,CAACiB,SAAL,GAAiBJ,OAAO,CAACI,SAAzB;;;MAGF,MAAMC,OAAO,GAAGf,SAAS,CAACgB,WAAV,GAAwBC,IAAxB,CAA6BF,OAAO;QAClD,OAAOA,OAAO,CAACG,QAAR,CAAiBT,SAAjB,CAAP;OADc,CAAhB;MAIAZ,IAAI,CAACW,KAAL,CAAYC,SAAZ,IAAyBM,OAAzB;KAXF;;;EAeF,OAAOlB,IAAP;AACD;;;;"}