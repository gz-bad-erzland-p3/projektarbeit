{"version":3,"file":"__styles.cjs.js","sources":["../../../packages/core/src/__styles.ts"],"sourcesContent":["import { debugData, isDevToolsEnabled, getSourceURLfromError } from './devtools';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport { MakeStylesOptions, CSSClassesMapBySlot, CSSRulesByBucket } from './types';\n\n/**\n * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.\n *\n * @internal\n */\nexport function __styles<Slots extends string>(\n  classesMapBySlot: CSSClassesMapBySlot<Slots>,\n  cssRules: CSSRulesByBucket,\n) {\n  const insertionCache: Record<string, boolean> = {};\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  let sourceURL: string | undefined;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceURL = getSourceURLfromError();\n  }\n\n  function computeClasses(options: Pick<MakeStylesOptions, 'dir' | 'renderer'>): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules!);\n      insertionCache[rendererId] = true;\n    }\n\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!, sourceURL);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"names":["__styles","classesMapBySlot","cssRules","insertionCache","ltrClassNamesForSlots","rtlClassNamesForSlots","sourceURL","process","env","NODE_ENV","isDevToolsEnabled","getSourceURLfromError","computeClasses","options","dir","renderer","isLTR","rendererId","id","reduceToClassNameForSlots","undefined","insertCSSRules","classNamesForSlots","debugData","addSequenceDetails"],"mappings":";;;;;;;;;;AAIA;;;;;;SAKgBA,SACdC,kBACAC;EAEA,MAAMC,cAAc,GAA4B,EAAhD;EAEA,IAAIC,qBAAqB,GAAiC,IAA1D;EACA,IAAIC,qBAAqB,GAAiC,IAA1D;EAEA,IAAIC,SAAJ;;EACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,mCAA7C,EAAgE;IAC9DJ,SAAS,GAAGK,2CAAqB,EAAjC;;;EAGF,SAASC,cAAT,CAAwBC,OAAxB;IACE,MAAM;MAAEC,GAAF;MAAOC;QAAaF,OAA1B;IAEA,MAAMG,KAAK,GAAGF,GAAG,KAAK,KAAtB;;IAEA,MAAMG,UAAU,GAAGD,KAAK,GAAGD,QAAQ,CAACG,EAAZ,GAAiBH,QAAQ,CAACG,EAAT,GAAc,GAAvD;;IAEA,IAAIF,KAAJ,EAAW;MACT,IAAIZ,qBAAqB,KAAK,IAA9B,EAAoC;QAClCA,qBAAqB,GAAGe,mDAAyB,CAAClB,gBAAD,EAAmBa,GAAnB,CAAjD;;KAFJ,MAIO;MACL,IAAIT,qBAAqB,KAAK,IAA9B,EAAoC;QAClCA,qBAAqB,GAAGc,mDAAyB,CAAClB,gBAAD,EAAmBa,GAAnB,CAAjD;;;;IAIJ,IAAIX,cAAc,CAACc,UAAD,CAAd,KAA+BG,SAAnC,EAA8C;MAC5CL,QAAQ,CAACM,cAAT,CAAwBnB,QAAxB;MACAC,cAAc,CAACc,UAAD,CAAd,GAA6B,IAA7B;;;IAGF,MAAMK,kBAAkB,GAAGN,KAAK,GAC3BZ,qBAD2B,GAE3BC,qBAFL;;IAIA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,mCAA7C,EAAgE;MAC9Da,eAAS,CAACC,kBAAV,CAA6BF,kBAA7B,EAAkDhB,SAAlD;;;IAGF,OAAOgB,kBAAP;;;EAGF,OAAOV,cAAP;AACD;;;;"}