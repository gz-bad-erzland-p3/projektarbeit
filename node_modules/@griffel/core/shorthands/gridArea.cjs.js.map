{"version":3,"file":"gridArea.cjs.js","sources":["../../../../packages/core/src/shorthands/gridArea.ts"],"sourcesContent":["import type { GriffelStylesStrictCSSObject } from '../types';\nimport { GridAreaInput } from './types';\n\ntype GridAreaStyle = Pick<\n  GriffelStylesStrictCSSObject,\n  'gridRowStart' | 'gridRowEnd' | 'gridColumnStart' | 'gridColumnEnd'\n>;\n\nconst cssVarRegEx = /var\\(.*\\)/gi;\n\nfunction isValidGridAreaInput(value: GridAreaInput) {\n  return value === undefined || typeof value === 'number' || (typeof value === 'string' && !cssVarRegEx.test(value));\n}\n\n// A custom-ident can be an alpha-numeric string including dash (-), underscore, escaped (\\) characters, and escaped unicode\nconst customIdentRegEx = /^[a-zA-Z0-9\\-_\\\\#;]+$/;\nconst nonCustomIdentRegEx = /^-moz-initial$|^auto$|^initial$|^inherit$|^revert$|^unset$|^span \\d+$|\\d.*/;\n\n// See https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident\nfunction isCustomIdent(value: GridAreaInput | undefined): boolean {\n  return (\n    value !== undefined && typeof value === 'string' && customIdentRegEx.test(value) && !nonCustomIdentRegEx.test(value)\n  );\n}\n\nexport function gridArea(all: GridAreaInput): GridAreaStyle;\nexport function gridArea(rowStart: GridAreaInput, columnStart: GridAreaInput): GridAreaStyle;\nexport function gridArea(rowStart: GridAreaInput, columnStart: GridAreaInput, rowEnd: GridAreaInput): GridAreaStyle;\nexport function gridArea(\n  rowStart: GridAreaInput,\n  columnStart: GridAreaInput,\n  rowEnd: GridAreaInput,\n  columnEnd: GridAreaInput,\n): GridAreaStyle;\n\n/**\n * A function that implements CSS spec conformant expansion for \"grid-area\"\n *\n * @example\n *   gridArea('auto')\n *   gridArea('first', 'second')\n *   gridArea(2, 4, 4)\n *   gridArea(2, 4, 1, 3)\n *\n * See https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area\n */\nexport function gridArea(...values: GridAreaInput[]): GridAreaStyle {\n  // if any value is not valid, then do not apply the CSS.\n  if (values.some(value => !isValidGridAreaInput(value))) {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error(\n        `The value passed to shorthands.gridArea() did not match any gridArea property specs. The CSS styles were not generated. Please, check the gridArea documentation.`,\n        [\n          'The value passed to shorthands.gridArea() did not match any gridArea property specs. ',\n          'The CSS styles were not generated.\\n',\n          'Please, check the `grid-area` documentation:\\n',\n          '- https://developer.mozilla.org/docs/Web/CSS/grid-area',\n          '- https://griffel.js.org/react/api/shorthands#shorthandsgridarea',\n        ].join(''),\n      );\n    }\n\n    return {};\n  }\n  const gridRowStart = values[0] !== undefined ? values[0] : 'auto';\n\n  // When grid-column-start is omitted, if grid-row-start is a <custom-ident>,\n  // all four longhands are set to that value.\n  // Otherwise, it is set to auto.\n  const gridColumnStart = values[1] !== undefined ? values[1] : isCustomIdent(gridRowStart) ? gridRowStart : 'auto';\n\n  // When grid-row-end is omitted,\n  // if grid-row-start is a <custom-ident>, grid-row-end is set to that <custom-ident>;\n  // otherwise, it is set to auto.\n  const gridRowEnd = values[2] !== undefined ? values[2] : isCustomIdent(gridRowStart) ? gridRowStart : 'auto';\n\n  // When grid-column-end is omitted,\n  // if grid-column-start is a <custom-ident>, grid-column-end is set to that <custom-ident>;\n  // otherwise, it is set to auto.\n  const gridColumnEnd = values[3] !== undefined ? values[3] : isCustomIdent(gridColumnStart) ? gridColumnStart : 'auto';\n\n  return {\n    gridRowStart,\n    gridColumnStart,\n    gridRowEnd,\n    gridColumnEnd,\n  };\n}\n"],"names":["cssVarRegEx","isValidGridAreaInput","value","undefined","test","customIdentRegEx","nonCustomIdentRegEx","isCustomIdent","gridArea","values","some","process","env","NODE_ENV","console","error","join","gridRowStart","gridColumnStart","gridRowEnd","gridColumnEnd"],"mappings":";;;;AAQA,MAAMA,WAAW,GAAG,aAApB;;AAEA,SAASC,oBAAT,CAA8BC,KAA9B;EACE,OAAOA,KAAK,KAAKC,SAAV,IAAuB,OAAOD,KAAP,KAAiB,QAAxC,IAAqD,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACF,WAAW,CAACI,IAAZ,CAAiBF,KAAjB,CAA1F;AACD;;;AAGD,MAAMG,gBAAgB,GAAG,uBAAzB;AACA,MAAMC,mBAAmB,GAAG,4EAA5B;;AAGA,SAASC,aAAT,CAAuBL,KAAvB;EACE,OACEA,KAAK,KAAKC,SAAV,IAAuB,OAAOD,KAAP,KAAiB,QAAxC,IAAoDG,gBAAgB,CAACD,IAAjB,CAAsBF,KAAtB,CAApD,IAAoF,CAACI,mBAAmB,CAACF,IAApB,CAAyBF,KAAzB,CADvF;AAGD;AAYD;;;;;;;;;;;;;SAWgBM,SAAS,GAAGC;;EAE1B,IAAIA,MAAM,CAACC,IAAP,CAAYR,KAAK,IAAI,CAACD,oBAAoB,CAACC,KAAD,CAA1C,CAAJ,EAAwD;IACtD,IAAIS,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;;MAEzCC,OAAO,CAACC,KAAR,oKAAA,EAEE,CACE,uFADF,EAEE,sCAFF,EAGE,gDAHF,EAIE,wDAJF,EAKE,kEALF,EAMEC,IANF,CAMO,EANP,CAFF;;;IAYF,OAAO,EAAP;;;EAEF,MAAMC,YAAY,GAAGR,MAAM,CAAC,CAAD,CAAN,KAAcN,SAAd,GAA0BM,MAAM,CAAC,CAAD,CAAhC,GAAsC,MAA3D;;;;EAKA,MAAMS,eAAe,GAAGT,MAAM,CAAC,CAAD,CAAN,KAAcN,SAAd,GAA0BM,MAAM,CAAC,CAAD,CAAhC,GAAsCF,aAAa,CAACU,YAAD,CAAb,GAA8BA,YAA9B,GAA6C,MAA3G;;;;EAKA,MAAME,UAAU,GAAGV,MAAM,CAAC,CAAD,CAAN,KAAcN,SAAd,GAA0BM,MAAM,CAAC,CAAD,CAAhC,GAAsCF,aAAa,CAACU,YAAD,CAAb,GAA8BA,YAA9B,GAA6C,MAAtG;;;;EAKA,MAAMG,aAAa,GAAGX,MAAM,CAAC,CAAD,CAAN,KAAcN,SAAd,GAA0BM,MAAM,CAAC,CAAD,CAAhC,GAAsCF,aAAa,CAACW,eAAD,CAAb,GAAiCA,eAAjC,GAAmD,MAA/G;EAEA,OAAO;IACLD,YADK;IAELC,eAFK;IAGLC,UAHK;IAILC;GAJF;AAMD;;;;"}